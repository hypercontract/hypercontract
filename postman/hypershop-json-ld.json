{
	"info": {
		"_postman_id": "520f0fe6-ad4b-47e9-9e8a-116e2ceef76c",
		"name": "hypercontract JSON-LD",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Check API Root",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "998ca8fc-9e01-43f5-94c0-6a7651b5b758",
						"exec": [
							"var defaultContentType = postman.getEnvironmentVariable('defaultContentType');",
							"var defaultContentTypeRegExp = postman.getEnvironmentVariable('defaultContentTypeRegExp');",
							"var baseUrl = postman.getEnvironmentVariable('baseUrl');",
							"var nsUri = postman.getEnvironmentVariable('nsUri');",
							"var apiRoot = JSON.parse(responseBody);",
							"",
							"var selfLink = apiRoot['@id'];",
							"var searchCatalogLink = apiRoot.searchCatalog;",
							"var shoppingCartLink = apiRoot.shoppingCart;",
							"var ordersLink = apiRoot.orderHistory;",
							"var userProfileLink = apiRoot.userProfile;",
							"",
							"tests['status code is 200 OK'] = responseCode.code === 200;",
							"tests['Content-Type header is ' + defaultContentType] = postman.getResponseHeader('Content-Type').match(defaultContentTypeRegExp);",
							"// tests['response body contains the API version'] = apiRoot.version === '1.0';",
							"tests['response body contains self link'] = selfLink === baseUrl;",
							"tests['response body contains link to search catalog'] = searchCatalogLink === baseUrl + 'products';",
							"tests['response body contains link to shopping cart'] = shoppingCartLink === baseUrl + 'shoppingCart';",
							"tests['response body contains link to orders'] = ordersLink === baseUrl + 'orders';",
							"tests['response body contains link to user profile'] = userProfileLink === baseUrl + 'userProfile';",
							"",
							"postman.setEnvironmentVariable('apiRootLink', selfLink);",
							"postman.setEnvironmentVariable('searchCatalogLink', searchCatalogLink + '?queryString=pizza');",
							"postman.setEnvironmentVariable('shoppingCartLink', shoppingCartLink);",
							"postman.setEnvironmentVariable('ordersLink', ordersLink);",
							"postman.setEnvironmentVariable('userProfileLink', userProfileLink);",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "3f002e17-fca4-41e5-a788-2eb37eabed5d",
						"exec": [
							"postman.clearEnvironmentVariables();",
							"",
							"var baseUrl = postman.getGlobalVariable('baseUrl');",
							"",
							"var nsUri = baseUrl + 'profile/';",
							"var mediaType = 'application/ld+json'; //;profile=\"' + nsUri + '\"';",
							"",
							"var mediaTypeRegExp = _.escapeRegExp(mediaType).split(';').join('(.*)');",
							"",
							"postman.setEnvironmentVariable('defaultAccept', mediaType);",
							"postman.setEnvironmentVariable('defaultContentType', mediaType);",
							"postman.setEnvironmentVariable('defaultContentTypeRegExp', mediaTypeRegExp);",
							"postman.setEnvironmentVariable('baseUrl', baseUrl);",
							"postman.setEnvironmentVariable('nsUri', nsUri);",
							"",
							"var linksSchema = {",
							"    type: 'object',",
							"    properties: {",
							"        self: {",
							"            type: 'object',",
							"            properties: {",
							"                href: {",
							"                    type: 'string'",
							"                }",
							"            }",
							"        }",
							"    },",
							"    required: [",
							"        'self'",
							"    ]",
							"};",
							"",
							"postman.setEnvironmentVariable('productsSchema', JSON.stringify({",
							"    \"type\": \"object\",",
							"    \"properties\": {",
							"        \"@context\": {",
							"            \"type\": \"object\"",
							"        },",
							"        \"@id\": {",
							"            \"type\": \"string\"",
							"        },",
							"        \"@type\": {",
							"            \"type\": \"string\"",
							"        },",
							"        \"products\": {",
							"            \"type\": \"array\",",
							"            \"items\": {",
							"                \"type\": \"object\",",
							"                \"properties\": {",
							"                    \"@id\": {",
							"                        \"type\": \"string\"",
							"                    },",
							"                    \"@type\": {",
							"                        \"type\": \"string\"",
							"                    },",
							"                    \"name\": {",
							"                        \"type\": \"string\"",
							"                    },",
							"                    \"description\": {",
							"                        \"type\": \"string\"",
							"                    },",
							"                    \"price\": {",
							"                        \"type\": \"number\"",
							"                    },",
							"                    \"image\": {",
							"                        \"type\": \"string\"",
							"                    },",
							"                    \"addToShoppingCart\": {",
							"                        \"type\": \"string\"",
							"                    }",
							"                },",
							"                \"additionalProperties\": false,",
							"                \"required\": [",
							"                    \"@id\",",
							"                    \"@type\",",
							"                    \"name\",",
							"                    \"description\",",
							"                    \"price\",",
							"                    \"image\",",
							"                    \"addToShoppingCart\"",
							"                ]",
							"            }",
							"        }",
							"    },",
							"    \"additionalProperties\": false,",
							"    \"required\": [",
							"        \"@context\",",
							"        \"@id\",",
							"        \"@type\",",
							"        \"products\"",
							"    ]",
							"}));",
							"",
							"postman.setEnvironmentVariable('shoppingCartSchema', JSON.stringify({",
							"    \"type\": \"object\",",
							"    \"properties\": {",
							"        \"@context\": {",
							"            \"type\": \"object\"",
							"        },",
							"        \"@id\": {",
							"            \"type\": \"string\"",
							"        },",
							"        \"@type\": {",
							"            \"type\": \"string\"",
							"        },",
							"        \"totalPrice\": {",
							"            \"type\": \"number\"",
							"        },",
							"        \"items\": {",
							"            \"type\": \"array\",",
							"            \"items\": {",
							"                \"type\": \"object\",",
							"                \"properties\": {",
							"                    \"@id\": {",
							"                        \"type\": \"string\"",
							"                    },",
							"                    \"@type\": {",
							"                        \"type\": \"string\"",
							"                    },",
							"                    \"name\": {",
							"                        \"type\": \"string\"",
							"                    },",
							"                    \"description\": {",
							"                        \"type\": \"string\"",
							"                    },",
							"                    \"price\": {",
							"                        \"type\": \"number\"",
							"                    },",
							"                    \"quantity\": {",
							"                        \"type\": \"number\"",
							"                    },",
							"                    \"product\": {",
							"                        \"type\": \"string\"",
							"                    },",
							"                    \"remove\": {",
							"                        \"type\": \"string\"",
							"                    },",
							"                    \"updateQuantity\": {",
							"                        \"type\": \"string\"",
							"                    }",
							"                },",
							"                \"additionalProperties\": false,",
							"                \"required\": [",
							"                    \"@id\",",
							"                    \"@type\",",
							"                    \"name\",",
							"                    \"description\",",
							"                    \"price\",",
							"                    \"quantity\",",
							"                    \"product\",",
							"                    \"remove\",",
							"                    \"updateQuantity\"",
							"                ]",
							"            }",
							"        },",
							"        \"placeOrder\": {",
							"            \"type\": \"string\"",
							"        }",
							"    },",
							"    \"additionalProperties\": false,",
							"    \"required\": [",
							"        \"@context\",",
							"        \"@id\",",
							"        \"@type\",",
							"        \"totalPrice\",",
							"        \"items\"",
							"    ]",
							"}));",
							"",
							"postman.setEnvironmentVariable('userProfileSchema', JSON.stringify({",
							"    \"type\": \"object\",",
							"    \"properties\": {",
							"        \"@context\": {",
							"            \"type\": \"object\"",
							"        },",
							"        \"@id\": {",
							"            \"type\": \"string\"",
							"        },",
							"        \"@type\": {",
							"            \"type\": \"string\"",
							"        },",
							"        \"paymentOptions\": {",
							"            \"type\": \"array\",",
							"            \"items\": {",
							"                \"type\": \"object\",",
							"                \"properties\": {",
							"                    \"@id\": {",
							"                        \"type\": \"string\"",
							"                    },",
							"                    \"@type\": {",
							"                        \"type\": \"string\"",
							"                    },",
							"                    \"accountOwner\": {",
							"                        \"type\": \"string\"",
							"                    },",
							"                    \"iban\": {",
							"                        \"type\": \"string\"",
							"                    },",
							"                    \"bic\": {",
							"                        \"type\": \"string\"",
							"                    }",
							"                },",
							"                \"additionalProperties\": false,",
							"                \"required\": [",
							"                    \"@id\",",
							"                    \"@type\",",
							"                    \"accountOwner\",",
							"                    \"iban\",",
							"                    \"bic\"",
							"                ]",
							"            }",
							"        },",
							"        \"addresses\": {",
							"            \"type\": \"array\",",
							"            \"items\": {",
							"                \"type\": \"object\",",
							"                \"properties\": {",
							"                    \"@id\": {",
							"                        \"type\": \"string\"",
							"                    },",
							"                    \"@type\": {",
							"                        \"type\": \"string\"",
							"                    },",
							"                    \"name\": {",
							"                        \"type\": \"string\"",
							"                    },",
							"                    \"street\": {",
							"                        \"type\": \"string\"",
							"                    },",
							"                    \"zipCode\": {",
							"                        \"type\": \"string\"",
							"                    },",
							"                    \"city\": {",
							"                        \"type\": \"string\"",
							"                    },",
							"                    \"country\": {",
							"                        \"type\": \"string\"",
							"                    }",
							"                },",
							"                \"additionalProperties\": false,",
							"                \"required\": [",
							"                    \"@id\",",
							"                    \"@type\",",
							"                    \"name\",",
							"                    \"street\",",
							"                    \"zipCode\",",
							"                    \"city\",",
							"                    \"country\"",
							"                ]",
							"            }",
							"        }",
							"    },",
							"    \"additionalProperties\": false,",
							"    \"required\": [",
							"        \"@context\",",
							"        \"@id\",",
							"        \"@type\",",
							"        \"paymentOptions\",",
							"        \"addresses\"",
							"    ]",
							"}));",
							"",
							"postman.setEnvironmentVariable('orderSchema', JSON.stringify({",
							"    \"type\": \"object\",",
							"    \"properties\": {",
							"        \"@context\": {",
							"            \"type\": \"object\"",
							"        },",
							"        \"@id\": {",
							"            \"type\": \"string\"",
							"        },",
							"        \"@type\": {",
							"            \"type\": \"string\"",
							"        },",
							"        \"date\": {",
							"            \"type\": \"string\"",
							"        },",
							"        \"status\": {",
							"            \"type\": \"string\",",
							"            \"enum\": [",
							"                \"Cancelled\",",
							"                \"Delivered\",",
							"                \"InTransit\",",
							"                \"PaymentDue\",",
							"                \"PickupAvailable\",",
							"                \"Problem\",",
							"                \"Processing\",",
							"                \"Returned\"",
							"            ]",
							"        },",
							"        \"items\": {",
							"            \"type\": \"array\",",
							"            \"items\": {",
							"                \"type\": \"object\",",
							"                \"properties\": {",
							"                    \"name\": {",
							"                        \"type\": \"string\"",
							"                    },",
							"                    \"description\": {",
							"                        \"type\": \"string\"",
							"                    },",
							"                    \"price\": {",
							"                        \"type\": \"number\"",
							"                    },",
							"                    \"quantity\": {",
							"                        \"type\": \"number\"",
							"                    },",
							"                    \"product\": {",
							"                        \"type\": \"string\"",
							"                    }",
							"                },",
							"                \"additionalProperties\": false,",
							"                \"required\": [",
							"                    \"name\",",
							"                    \"description\",",
							"                    \"price\",",
							"                    \"quantity\",",
							"                    \"product\"",
							"                ]",
							"            }",
							"        },",
							"        \"billingAddress\": {",
							"            \"type\": \"object\",",
							"            \"properties\": {",
							"                \"name\": {",
							"                    \"type\": \"string\"",
							"                },",
							"                \"street\": {",
							"                    \"type\": \"string\"",
							"                },",
							"                \"zipCode\": {",
							"                    \"type\": \"string\"",
							"                },",
							"                \"city\": {",
							"                    \"type\": \"string\"",
							"                },",
							"                \"country\": {",
							"                    \"type\": \"string\"",
							"                }",
							"            },",
							"            \"additionalProperties\": false,",
							"            \"required\": [",
							"                \"name\",",
							"                \"street\",",
							"                \"zipCode\",",
							"                \"city\",",
							"                \"country\"",
							"            ]",
							"        },",
							"        \"shippingAddress\": {",
							"            \"type\": \"object\",",
							"            \"properties\": {",
							"                \"name\": {",
							"                    \"type\": \"string\"",
							"                },",
							"                \"street\": {",
							"                    \"type\": \"string\"",
							"                },",
							"                \"zipCode\": {",
							"                    \"type\": \"string\"",
							"                },",
							"                \"city\": {",
							"                    \"type\": \"string\"",
							"                },",
							"                \"country\": {",
							"                    \"type\": \"string\"",
							"                }",
							"            },",
							"            \"additionalProperties\": false,",
							"            \"required\": [",
							"                \"name\",",
							"                \"street\",",
							"                \"zipCode\",",
							"                \"city\",",
							"                \"country\"",
							"            ]",
							"        },",
							"        \"payment\": {",
							"            \"type\": \"object\",",
							"            \"properties\": {",
							"                \"accountOwner\": {",
							"                    \"type\": \"string\"",
							"                },",
							"                \"iban\": {",
							"                    \"type\": \"string\"",
							"                },",
							"                \"bic\": {",
							"                    \"type\": \"string\"",
							"                }",
							"            },",
							"            \"additionalProperties\": false,",
							"            \"required\": [",
							"                \"accountOwner\",",
							"                \"iban\",",
							"                \"bic\"",
							"            ]",
							"        },",
							"        \"cancel\": {",
							"            \"type\": \"string\"",
							"        }",
							"    },",
							"    \"additionalProperties\": false,",
							"    \"required\": [",
							"        \"@context\",",
							"        \"@id\",",
							"        \"@type\",",
							"        \"date\",",
							"        \"items\",",
							"        \"billingAddress\",",
							"        \"shippingAddress\",",
							"        \"payment\"",
							"    ]",
							"}));",
							"",
							"postman.setEnvironmentVariable('ordersSchema', JSON.stringify({",
							"    \"type\": \"object\",",
							"    \"properties\": {",
							"        \"@context\": {",
							"            \"type\": \"object\"",
							"        },",
							"        \"@id\": {",
							"            \"type\": \"string\"",
							"        },",
							"        \"@type\": {",
							"            \"type\": \"string\"",
							"        },",
							"        \"orders\": {",
							"            \"type\": \"array\",",
							"            \"items\": {",
							"                \"type\": \"object\",",
							"                \"properties\": {",
							"                    \"@id\": {",
							"                        \"type\": \"string\"",
							"                    },",
							"                    \"@type\": {",
							"                        \"type\": \"string\"",
							"                    },",
							"                    \"date\": {",
							"                        \"type\": \"string\"",
							"                    },",
							"                    \"status\": {",
							"                        \"type\": \"string\",",
							"                        \"enum\": [",
							"                            \"Cancelled\",",
							"                            \"Delivered\",",
							"                            \"InTransit\",",
							"                            \"PaymentDue\",",
							"                            \"PickupAvailable\",",
							"                            \"Problem\",",
							"                            \"Processing\",",
							"                            \"Returned\"",
							"                        ]",
							"                    },",
							"                    \"items\": {",
							"                        \"type\": \"array\",",
							"                        \"items\": {",
							"                            \"type\": \"object\",",
							"                            \"properties\": {",
							"                                \"name\": {",
							"                                    \"type\": \"string\"",
							"                                },",
							"                                \"description\": {",
							"                                    \"type\": \"string\"",
							"                                },",
							"                                \"price\": {",
							"                                    \"type\": \"number\"",
							"                                },",
							"                                \"quantity\": {",
							"                                    \"type\": \"number\"",
							"                                },",
							"                                \"product\": {",
							"                                    \"type\": \"string\"",
							"                                }",
							"                            },",
							"                            \"additionalProperties\": false,",
							"                            \"required\": [",
							"                                \"name\",",
							"                                \"description\",",
							"                                \"price\",",
							"                                \"quantity\",",
							"                                \"product\"",
							"                            ]",
							"                        }",
							"                    },",
							"                    \"billingAddress\": {",
							"                        \"type\": \"object\",",
							"                        \"properties\": {",
							"                            \"name\": {",
							"                                \"type\": \"string\"",
							"                            },",
							"                            \"street\": {",
							"                                \"type\": \"string\"",
							"                            },",
							"                            \"zipCode\": {",
							"                                \"type\": \"string\"",
							"                            },",
							"                            \"city\": {",
							"                                \"type\": \"string\"",
							"                            },",
							"                            \"country\": {",
							"                                \"type\": \"string\"",
							"                            }",
							"                        },",
							"                        \"additionalProperties\": false,",
							"                        \"required\": [",
							"                            \"name\",",
							"                            \"street\",",
							"                            \"zipCode\",",
							"                            \"city\",",
							"                            \"country\"",
							"                        ]",
							"                    },",
							"                    \"shippingAddress\": {",
							"                        \"type\": \"object\",",
							"                        \"properties\": {",
							"                            \"name\": {",
							"                                \"type\": \"string\"",
							"                            },",
							"                            \"street\": {",
							"                                \"type\": \"string\"",
							"                            },",
							"                            \"zipCode\": {",
							"                                \"type\": \"string\"",
							"                            },",
							"                            \"city\": {",
							"                                \"type\": \"string\"",
							"                            },",
							"                            \"country\": {",
							"                                \"type\": \"string\"",
							"                            }",
							"                        },",
							"                        \"additionalProperties\": false,",
							"                        \"required\": [",
							"                            \"name\",",
							"                            \"street\",",
							"                            \"zipCode\",",
							"                            \"city\",",
							"                            \"country\"",
							"                        ]",
							"                    },",
							"                    \"payment\": {",
							"                        \"type\": \"object\",",
							"                        \"properties\": {",
							"                            \"accountOwner\": {",
							"                                \"type\": \"string\"",
							"                            },",
							"                            \"iban\": {",
							"                                \"type\": \"string\"",
							"                            },",
							"                            \"bic\": {",
							"                                \"type\": \"string\"",
							"                            }",
							"                        },",
							"                        \"additionalProperties\": false,",
							"                        \"required\": [",
							"                            \"accountOwner\",",
							"                            \"iban\",",
							"                            \"bic\"",
							"                        ]",
							"                    },",
							"                    \"cancel\": {",
							"                        \"type\": \"string\"",
							"                    }",
							"                },",
							"                \"additionalProperties\": false,",
							"                \"required\": [",
							"                    \"@id\",",
							"                    \"@type\",",
							"                    \"date\",",
							"                    \"items\",",
							"                    \"billingAddress\",",
							"                    \"shippingAddress\",",
							"                    \"payment\"",
							"                ]",
							"            }",
							"        }",
							"    },",
							"    \"additionalProperties\": false,",
							"    \"required\": [",
							"        \"@context\",",
							"        \"@id\",",
							"        \"@type\",",
							"        \"orders\"",
							"    ]",
							"}));",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "{{defaultAccept}}"
					}
				],
				"url": {
					"raw": "{{baseUrl}}",
					"host": [
						"{{baseUrl}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "View empty Shopping Cart",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "40cae48b-5d42-4688-880f-6e9e48d86c5e",
						"exec": [
							"var schema = JSON.parse(postman.getEnvironmentVariable('shoppingCartSchema'));",
							"var defaultContentType = postman.getEnvironmentVariable('defaultContentType');",
							"var defaultContentTypeRegExp = postman.getEnvironmentVariable('defaultContentTypeRegExp');",
							"var baseUrl = postman.getEnvironmentVariable('baseUrl');",
							"var nsUri = postman.getEnvironmentVariable('nsUri');",
							"var shoppingCart = JSON.parse(responseBody);",
							"",
							"var selfLink = shoppingCart['@id'];",
							"var shoppingCartItemList = Array.isArray(shoppingCart.items) ? shoppingCart.items : [shoppingCart.items];",
							"",
							"tests['status code is 200 OK'] = responseCode.code === 200;",
							"tests['Content-Type header is ' + defaultContentType] = postman.getResponseHeader('Content-Type').match(defaultContentTypeRegExp);",
							"// tests['response body is a shopping cart'] = tv4.validate(shoppingCart, schema);",
							"tests['response body contains no shopping cart items'] = shoppingCartItemList.length === 0;",
							"tests['response body contains self link'] = selfLink === baseUrl + 'shoppingCart';",
							"tests['response body contains no place order link'] = _.isUndefined(shoppingCart.placeOrder);",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "{{defaultAccept}}"
					}
				],
				"url": {
					"raw": "{{shoppingCartLink}}",
					"host": [
						"{{shoppingCartLink}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Search Catalog for Products",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "cc617d7d-c96c-4100-acfa-08e34acdfeb1",
						"exec": [
							"var schema = JSON.parse(postman.getEnvironmentVariable('productsSchema'));",
							"var defaultContentType = postman.getEnvironmentVariable('defaultContentType');",
							"var defaultContentTypeRegExp = postman.getEnvironmentVariable('defaultContentTypeRegExp');",
							"var baseUrl = postman.getEnvironmentVariable('baseUrl');",
							"var nsUri = postman.getEnvironmentVariable('nsUri');",
							"var products = JSON.parse(responseBody);",
							"",
							"var selfLink = products['@id'];",
							"var productList = products.products;",
							"",
							"tests['status code is 200 OK'] = responseCode.code === 200;",
							"tests['Content-Type header is ' + defaultContentType] = postman.getResponseHeader('Content-Type').match(defaultContentTypeRegExp);",
							"// tests['response body is a list of products'] = tv4.validate(products, schema);",
							"tests['response body contains at least 2 products'] = productList.length >= 2;",
							"tests['response body contains self link'] = selfLink === baseUrl + 'products?queryString=pizza';",
							"",
							"var allProductsHaveSelfLink = true;",
							"var allProductsHaveSCLink = true;",
							"var allProductsHaveImageLink = true;",
							"",
							"var addToShoppingCartLinks = [];",
							"",
							"productList.forEach(function (product) {",
							"    var productHasSelfLink = product['@id'].match(baseUrl + 'products/.*');",
							"    ",
							"    var addToShoppingCartLink = product.addToShoppingCart;",
							"    var productHasSCLink = addToShoppingCartLink === baseUrl + 'shoppingCart/items';",
							"    ",
							"    addToShoppingCartLinks.push(addToShoppingCartLink);",
							"    ",
							"    var productHasImageLink = _.startsWith(product.image, 'http');",
							"    ",
							"    allProductsHaveSelfLink = allProductsHaveSelfLink && productHasSelfLink;",
							"    allProductsHaveSCLink = allProductsHaveSCLink && productHasSCLink;",
							"    allProductsHaveImageLink = allProductsHaveImageLink && productHasImageLink;",
							"});",
							"",
							"tests['all products have self link'] = allProductsHaveSelfLink;",
							"tests['all products have add to shopping cart link'] = allProductsHaveSCLink;",
							"tests['all products have image link'] = allProductsHaveImageLink;",
							"",
							"postman.setEnvironmentVariable(\"addToShoppingCartLink1\", addToShoppingCartLinks[0]);",
							"postman.setEnvironmentVariable(\"addToShoppingCartLink2\", addToShoppingCartLinks[1]);",
							"",
							"postman.setEnvironmentVariable(\"productUri1\", productList[0]['@id']);",
							"postman.setEnvironmentVariable(\"productUri2\", productList[1]['@id']);",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "{{defaultAccept}}"
					}
				],
				"url": {
					"raw": "{{searchCatalogLink}}",
					"host": [
						"{{searchCatalogLink}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add Product to Shopping Cart #1",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"var baseUrl = postman.getEnvironmentVariable('baseUrl');\r",
							"\r",
							"tests['status code is 201 Created'] = responseCode.code === 201;\r",
							"tests['Location header redirects to /shoppingCart'] = postman.getResponseHeader('Location') === baseUrl + 'shoppingCart'; \r",
							"tests['response body is empty'] = responseBody === '';\r",
							"\r",
							"postman.setEnvironmentVariable('shoppingCartLink', postman.getResponseHeader('Location'));\r",
							""
						]
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"value": "{{defaultAccept}}"
					},
					{
						"key": "Content-Type",
						"value": "{{defaultContentType}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"product\": \"{{productUri1}}\",\n\t\"quantity\": 1\n}"
				},
				"url": {
					"raw": "{{addToShoppingCartLink1}}",
					"host": [
						"{{addToShoppingCartLink1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add Product to Shopping Cart #2",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"var baseUrl = postman.getEnvironmentVariable('baseUrl');\r",
							"\r",
							"tests['status code is 201 Created'] = responseCode.code === 201;\r",
							"tests['Location header redirects to /shoppingCart'] = postman.getResponseHeader('Location') === baseUrl + 'shoppingCart'; \r",
							"tests['response body is empty'] = responseBody === '';\r",
							"\r",
							"postman.setEnvironmentVariable('shoppingCartLink', postman.getResponseHeader('Location'));\r",
							""
						]
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"value": "{{defaultAccept}}"
					},
					{
						"key": "Content-Type",
						"value": "{{defaultContentType}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"product\": \"{{productUri2}}\",\n\t\"quantity\": 1\n}"
				},
				"url": {
					"raw": "{{addToShoppingCartLink2}}",
					"host": [
						"{{addToShoppingCartLink2}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "View Shopping Cart",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "e8bd0eaf-1a91-43ca-a0e6-e37e9ce9c62f",
						"exec": [
							"var schema = JSON.parse(postman.getEnvironmentVariable('shoppingCartSchema'));",
							"var defaultContentType = postman.getEnvironmentVariable('defaultContentType');",
							"var defaultContentTypeRegExp = postman.getEnvironmentVariable('defaultContentTypeRegExp');",
							"var baseUrl = postman.getEnvironmentVariable('baseUrl');",
							"var nsUri = postman.getEnvironmentVariable('nsUri');",
							"var shoppingCart = JSON.parse(responseBody);",
							"",
							"var selfLink = shoppingCart['@id'];",
							"var shoppingCartItemList = shoppingCart.items;",
							"var placeOrderLink = shoppingCart.placeOrder;",
							"",
							"tests['status code is 200 OK'] = responseCode.code === 200;",
							"tests['Content-Type header is ' + defaultContentType] = postman.getResponseHeader('Content-Type').match(defaultContentTypeRegExp);",
							"// tests['response body is a shopping cart'] = tv4.validate(shoppingCart, schema);",
							"tests['response body contains exactly 2 shopping cart items'] = shoppingCartItemList.length === 2;",
							"tests['response body contains self link'] = selfLink === baseUrl + 'shoppingCart';",
							"tests['response body contains place order link'] = placeOrderLink.match(baseUrl + 'orders');",
							"",
							"var allItemsHaveSelfLink = true;",
							"var allItemsHaveUpdateLink = true;",
							"var allItemsHaveRemoveLink = true;",
							"var allItemsHaveProductLink = true;",
							"",
							"var updateQuantityLinks = [];",
							"var removeLinks = [];",
							"",
							"shoppingCartItemList.forEach(function (item) {",
							"    var itemHasSelfLink = item['@id'].match(baseUrl + 'shoppingCart/items/.*');",
							"    ",
							"    var updateQuantityLink = item.changeQuantity;",
							"    var itemHasUpdateLink = updateQuantityLink.match(baseUrl + 'shoppingCart/items/.*');",
							"    updateQuantityLinks.push(updateQuantityLink);",
							"    ",
							"    var removeLink = item.remove;",
							"    var itemHasRemoveLink = removeLink.match(baseUrl + 'shoppingCart/items/.*');",
							"    removeLinks.push(removeLink);",
							"    ",
							"    var itemHasProductLink = item.product.match(baseUrl + 'products/.*');",
							"    ",
							"    allItemsHaveSelfLink = allItemsHaveSelfLink && itemHasSelfLink;",
							"    allItemsHaveUpdateLink = allItemsHaveUpdateLink && itemHasUpdateLink;",
							"    allItemsHaveRemoveLink = allItemsHaveRemoveLink && itemHasRemoveLink;",
							"    allItemsHaveProductLink = allItemsHaveProductLink && itemHasProductLink;",
							"});",
							"",
							"tests['all items have self link'] = allItemsHaveSelfLink;",
							"tests['all items have update quantity link'] = allItemsHaveUpdateLink;",
							"tests['all items have remove link'] = allItemsHaveRemoveLink;",
							"tests['all items have product link'] = allItemsHaveProductLink;",
							"",
							"postman.setEnvironmentVariable('shoppingCartItem1UpdateQuantityLink', updateQuantityLinks[0]);",
							"postman.setEnvironmentVariable('shoppingCartItem2RemoveLink', removeLinks[1]);",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "{{defaultAccept}}"
					}
				],
				"url": {
					"raw": "{{shoppingCartLink}}",
					"host": [
						"{{shoppingCartLink}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update quantity of Shopping Cart Item",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "8e233d4e-ca48-42db-bd27-cff03cd533fd",
						"exec": [
							"var schema = JSON.parse(postman.getEnvironmentVariable('shoppingCartSchema'));",
							"var defaultContentType = postman.getEnvironmentVariable('defaultContentType');",
							"var defaultContentTypeRegExp = postman.getEnvironmentVariable('defaultContentTypeRegExp');",
							"var baseUrl = postman.getEnvironmentVariable('baseUrl');",
							"var nsUri = postman.getEnvironmentVariable('nsUri');",
							"var shoppingCart = JSON.parse(responseBody);",
							"",
							"var selfLink = shoppingCart['@id'];",
							"var shoppingCartItemList = shoppingCart.items;",
							"var placeOrderLink = shoppingCart.placeOrder;",
							"",
							"tests['status code is 200 OK'] = responseCode.code === 200;",
							"tests['Content-Type header is ' + defaultContentType] = postman.getResponseHeader('Content-Type').match(defaultContentTypeRegExp);",
							"// tests['response body is a shopping cart'] = tv4.validate(shoppingCart, schema);",
							"tests['response body contains 2 shopping cart items'] = shoppingCartItemList.length === 2;",
							"tests['first shopping cart item has a quantity of 2'] = shoppingCartItemList[0].quantity === 2;",
							"tests['response body contains self link'] = selfLink === baseUrl + 'shoppingCart';",
							"tests['response body contains place order link'] = placeOrderLink.match(baseUrl + 'orders');",
							"",
							"var allItemsHaveSelfLink = true;",
							"var allItemsHaveUpdateLink = true;",
							"var allItemsHaveRemoveLink = true;",
							"var allItemsHaveProductLink = true;",
							"",
							"shoppingCartItemList.forEach(function (item) {",
							"    var itemHasSelfLink = item['@id'].match(baseUrl + 'shoppingCart/items/.*');",
							"    var itemHasUpdateLink = item.changeQuantity.match(baseUrl + 'shoppingCart/items/.*');",
							"    var itemHasRemoveLink = item.remove.match(baseUrl + 'shoppingCart/items/.*');",
							"    ",
							"    var itemHasProductLink = item.product.match(baseUrl + 'products/.*');",
							"",
							"    allItemsHaveSelfLink = allItemsHaveSelfLink && itemHasSelfLink;",
							"    allItemsHaveUpdateLink = allItemsHaveUpdateLink && itemHasUpdateLink;",
							"    allItemsHaveRemoveLink = allItemsHaveRemoveLink && itemHasRemoveLink;",
							"    allItemsHaveProductLink = allItemsHaveProductLink && itemHasProductLink;",
							"});",
							"",
							"tests['all items have self link'] = allItemsHaveSelfLink;",
							"tests['all items have update quantity link'] = allItemsHaveUpdateLink;",
							"tests['all items have remove link'] = allItemsHaveRemoveLink;",
							"tests['all items have product link'] = allItemsHaveProductLink;",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "Accept",
						"value": "{{defaultAccept}}"
					},
					{
						"key": "Content-Type",
						"value": "{{defaultContentType}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"quantity\": 2\n}"
				},
				"url": {
					"raw": "{{shoppingCartItem1UpdateQuantityLink}}",
					"host": [
						"{{shoppingCartItem1UpdateQuantityLink}}"
					]
				},
				"description": "\t"
			},
			"response": []
		},
		{
			"name": "Remove Item from Shopping Cart",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "53320351-fba4-48f5-ad9b-2358a6a452da",
						"exec": [
							"var schema = JSON.parse(postman.getEnvironmentVariable('shoppingCartSchema'));",
							"var defaultContentType = postman.getEnvironmentVariable('defaultContentType');",
							"var defaultContentTypeRegExp = postman.getEnvironmentVariable('defaultContentTypeRegExp');",
							"var baseUrl = postman.getEnvironmentVariable('baseUrl');",
							"var nsUri = postman.getEnvironmentVariable('nsUri');",
							"var shoppingCart = JSON.parse(responseBody);",
							"",
							"var selfLink = shoppingCart['@id'];",
							"var shoppingCartItemList = shoppingCart.items;",
							"var placeOrderLink = shoppingCart.placeOrder;",
							"",
							"tests['status code is 200 OK'] = responseCode.code === 200;",
							"tests['Content-Type header is ' + defaultContentType] = postman.getResponseHeader('Content-Type').match(defaultContentTypeRegExp);",
							"// tests['response body is a shopping cart'] = tv4.validate(shoppingCart, schema);",
							"tests['response body contains 1 shopping cart item'] = shoppingCartItemList.length === 1;",
							"tests['response body contains self link'] = selfLink === baseUrl + 'shoppingCart';",
							"tests['response body contains place order link'] = placeOrderLink.match(baseUrl + 'orders');",
							"",
							"var allItemsHaveSelfLink = true;",
							"var allItemsHaveUpdateLink = true;",
							"var allItemsHaveRemoveLink = true;",
							"var allItemsHaveProductLink = true;",
							"",
							"shoppingCartItemList.forEach(function (item) {",
							"    var itemHasSelfLink = item['@id'].match(baseUrl + 'shoppingCart/items/.*');",
							"    var itemHasUpdateLink = item.changeQuantity.match(baseUrl + 'shoppingCart/items/.*');",
							"    var itemHasRemoveLink = item.remove.match(baseUrl + 'shoppingCart/items/.*');",
							"    ",
							"    var itemHasProductLink = item.product.match(baseUrl + 'products/.*');",
							"",
							"    allItemsHaveSelfLink = allItemsHaveSelfLink && itemHasSelfLink;",
							"    allItemsHaveUpdateLink = allItemsHaveUpdateLink && itemHasUpdateLink;",
							"    allItemsHaveRemoveLink = allItemsHaveRemoveLink && itemHasRemoveLink;",
							"    allItemsHaveProductLink = allItemsHaveProductLink && itemHasProductLink;",
							"});",
							"",
							"tests['all items have self link'] = allItemsHaveSelfLink;",
							"tests['all items have update quantity link'] = allItemsHaveUpdateLink;",
							"tests['all items have remove link'] = allItemsHaveRemoveLink;",
							"tests['all items have product link'] = allItemsHaveProductLink;",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Accept",
						"value": "{{defaultAccept}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "\n"
				},
				"url": {
					"raw": "{{shoppingCartItem2RemoveLink}}",
					"host": [
						"{{shoppingCartItem2RemoveLink}}"
					]
				},
				"description": "\t"
			},
			"response": []
		},
		{
			"name": "View updated Shopping Cart",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "3cfb06d0-1104-456d-9c51-2770e92bc2d9",
						"exec": [
							"var schema = JSON.parse(postman.getEnvironmentVariable('shoppingCartSchema'));",
							"var defaultContentType = postman.getEnvironmentVariable('defaultContentType');",
							"var defaultContentTypeRegExp = postman.getEnvironmentVariable('defaultContentTypeRegExp');",
							"var baseUrl = postman.getEnvironmentVariable('baseUrl');",
							"var nsUri = postman.getEnvironmentVariable('nsUri');",
							"var shoppingCart = JSON.parse(responseBody);",
							"",
							"var selfLink = shoppingCart['@id'];",
							"var shoppingCartItemList = shoppingCart.items;",
							"var placeOrderLink = shoppingCart.placeOrder;",
							"",
							"tests['status code is 200 OK'] = responseCode.code === 200;",
							"tests['Content-Type header is ' + defaultContentType] = postman.getResponseHeader('Content-Type').match(defaultContentTypeRegExp);",
							"// tests['response body is a shopping cart'] = tv4.validate(shoppingCart, schema);",
							"tests['response body contains 1 shopping cart item'] = shoppingCartItemList.length === 1;",
							"tests['shopping cart item has a quantity of 2'] = shoppingCartItemList[0].quantity === 2;",
							"tests['response body contains self link'] = selfLink === baseUrl + 'shoppingCart';",
							"tests['response body contains place order link'] = placeOrderLink.match(baseUrl + 'orders');",
							"",
							"var allItemsHaveSelfLink = true;",
							"var allItemsHaveUpdateLink = true;",
							"var allItemsHaveRemoveLink = true;",
							"var allItemsHaveProductLink = true;",
							"",
							"shoppingCartItemList.forEach(function (item) {",
							"    var itemHasSelfLink = item['@id'].match(baseUrl + 'shoppingCart/items/.*');",
							"    var itemHasUpdateLink = item.changeQuantity.match(baseUrl + 'shoppingCart/items/.*');",
							"    var itemHasRemoveLink = item.remove.match(baseUrl + 'shoppingCart/items/.*');",
							"    ",
							"    var itemHasProductLink = item.product.match(baseUrl + 'products/.*');",
							"",
							"    allItemsHaveSelfLink = allItemsHaveSelfLink && itemHasSelfLink;",
							"    allItemsHaveUpdateLink = allItemsHaveUpdateLink && itemHasUpdateLink;",
							"    allItemsHaveRemoveLink = allItemsHaveRemoveLink && itemHasRemoveLink;",
							"    allItemsHaveProductLink = allItemsHaveProductLink && itemHasProductLink;",
							"});",
							"",
							"tests['all items have self link'] = allItemsHaveSelfLink;",
							"tests['all items have update quantity link'] = allItemsHaveUpdateLink;",
							"tests['all items have remove link'] = allItemsHaveRemoveLink;",
							"tests['all items have product link'] = allItemsHaveProductLink;",
							"",
							"postman.setEnvironmentVariable('placeOrderLink', placeOrderLink);",
							"",
							"postman.setEnvironmentVariable(\"lineItemUris\", JSON.stringify(shoppingCartItemList.map(function (item) {",
							"    return item['@id'];",
							"})));"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "{{defaultAccept}}"
					}
				],
				"url": {
					"raw": "{{shoppingCartLink}}",
					"host": [
						"{{shoppingCartLink}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Select Billing/Shipping Address, Payment",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "acb961ae-9266-4e94-b8f7-2a0d49cbf6f5",
						"exec": [
							"var schema = JSON.parse(postman.getEnvironmentVariable('userProfileSchema'));",
							"var defaultContentType = postman.getEnvironmentVariable('defaultContentType');",
							"var defaultContentTypeRegExp = postman.getEnvironmentVariable('defaultContentTypeRegExp');",
							"var baseUrl = postman.getEnvironmentVariable('baseUrl');",
							"var nsUri = postman.getEnvironmentVariable('nsUri');",
							"var userProfile = JSON.parse(responseBody);",
							"",
							"var selfLink = userProfile['@id'];",
							"var addressList = userProfile.addresses;",
							"var paymentOptionList = userProfile.paymentOptions;",
							"",
							"tests['status code is 200 OK'] = responseCode.code === 200;",
							"tests['Content-Type header is ' + defaultContentType] = postman.getResponseHeader('Content-Type').match(defaultContentTypeRegExp);",
							"// tests['response body is a user profile'] = tv4.validate(userProfile, schema);",
							"tests['response body contains at least 2 addresses'] = addressList.length >= 2;",
							"tests['response body contains at least 1 payment option'] = paymentOptionList.length >= 1;",
							"tests['response body contains self link'] = selfLink === baseUrl + 'userProfile';",
							"",
							"var allAddressesHaveSelfLink = true",
							"",
							"addressList.forEach(function (address) {",
							"    var addressHasSelfLink = address['@id'].match(baseUrl + 'userProfile/addresses/.*');",
							"    ",
							"    allAddressesHaveSelfLink = allAddressesHaveSelfLink && addressHasSelfLink;",
							"});",
							"",
							"tests['all addresses have self link'] = allAddressesHaveSelfLink;",
							"",
							"var allPaymentOptionsHaveSelfLink = true",
							"",
							"paymentOptionList.forEach(function (paymentOption) {",
							"    var paymentOptionHasSelfLink = paymentOption['@id'].match(baseUrl + 'userProfile/paymentOptions/.*');",
							"    ",
							"    allPaymentOptionsHaveSelfLink = allPaymentOptionsHaveSelfLink && paymentOptionHasSelfLink;",
							"});",
							"",
							"tests['all payment options have self link'] = allPaymentOptionsHaveSelfLink;",
							"",
							"postman.setEnvironmentVariable(\"paymentUri\", paymentOptionList[0]['@id']);",
							"postman.setEnvironmentVariable(\"billingAddressUri\", addressList[0]['@id']);",
							"postman.setEnvironmentVariable(\"shippingAddressUri\", addressList[1]['@id']);",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "{{defaultAccept}}"
					}
				],
				"url": {
					"raw": "{{userProfileLink}}",
					"host": [
						"{{userProfileLink}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Place Order",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "31288de3-7a48-4a2c-be7a-9bc0f9d3c7d9",
						"exec": [
							"var baseUrl = postman.getEnvironmentVariable('baseUrl');",
							"",
							"tests['status code is 201 Created'] = responseCode.code === 201;",
							"tests['Location header redirects to /orders/{orderId}'] = postman.getResponseHeader('Location').match(baseUrl + 'orders/.*?');",
							"tests['response body is empty'] = responseBody === '';",
							"",
							"postman.setEnvironmentVariable('orderLink', postman.getResponseHeader('Location'));",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"value": "{{defaultAccept}}"
					},
					{
						"key": "Content-Type",
						"value": "{{defaultContentType}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"shoppingCartItems\": {{lineItemUris}},\n\t\"billingAddress\": \"{{billingAddressUri}}\",\n\t\"shippingAddress\": \"{{shippingAddressUri}}\",\n\t\"payment\": \"{{paymentUri}}\"\n}"
				},
				"url": {
					"raw": "{{placeOrderLink}}",
					"host": [
						"{{placeOrderLink}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "View Order status",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "78d54e5c-8475-4c76-b037-fb1a50540c10",
						"exec": [
							"var schema = JSON.parse(postman.getEnvironmentVariable('orderSchema'));",
							"var defaultContentType = postman.getEnvironmentVariable('defaultContentType');",
							"var defaultContentTypeRegExp = postman.getEnvironmentVariable('defaultContentTypeRegExp');",
							"var baseUrl = postman.getEnvironmentVariable('baseUrl');",
							"var nsUri = postman.getEnvironmentVariable('nsUri');",
							"var order = JSON.parse(responseBody);",
							"",
							"var selfLink = order['@id'];",
							"var orderItemList = order.orderItems;",
							"var cancelOrderLink = order.cancel;",
							"",
							"tests['status code is 200 OK'] = responseCode.code === 200;",
							"tests['Content-Type header is ' + defaultContentType] = postman.getResponseHeader('Content-Type').match(defaultContentTypeRegExp);",
							"// tests['response body is a order'] = tv4.validate(order, schema);",
							"tests['response body contains 1 line item'] = orderItemList.length === 1;",
							"tests['order status is Processing'] = order.orderStatus === 'Processing';",
							"tests['response body contains self link'] = selfLink.match(baseUrl + 'orders/.*');",
							"tests['response body contains cancel link'] = cancelOrderLink.match(baseUrl + 'orders/.*');",
							"",
							"postman.setEnvironmentVariable('cancelOrderLink', cancelOrderLink);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "{{defaultAccept}}"
					}
				],
				"url": {
					"raw": "{{orderLink}}",
					"host": [
						"{{orderLink}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Cancel Order",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "1236fd43-cbee-4f3f-a066-c48d4adc7f74",
						"exec": [
							"var schema = JSON.parse(postman.getEnvironmentVariable('orderSchema'));",
							"var defaultContentType = postman.getEnvironmentVariable('defaultContentType');",
							"var defaultContentTypeRegExp = postman.getEnvironmentVariable('defaultContentTypeRegExp');",
							"var baseUrl = postman.getEnvironmentVariable('baseUrl');",
							"var nsUri = postman.getEnvironmentVariable('nsUri');",
							"var order = JSON.parse(responseBody);",
							"",
							"var selfLink = order['@id'];",
							"",
							"tests['status code is 200 OK'] = responseCode.code === 200;",
							"tests['Content-Type header is ' + defaultContentType] = postman.getResponseHeader('Content-Type').match(defaultContentTypeRegExp);",
							"// tests['response body is a order'] = tv4.validate(order, schema);",
							"tests['order status is Cancelled'] = order.orderStatus === 'Cancelled';",
							"tests['response body contains self link'] = selfLink.match(baseUrl + 'orders/.*');",
							"tests['response body contains no cancel link'] = _.isUndefined(order.cancel);",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "Accept",
						"value": "{{defaultAccept}}"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"cancellationReason\": \"meh...\"\n}"
				},
				"url": {
					"raw": "{{cancelOrderLink}}",
					"host": [
						"{{cancelOrderLink}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "View updated Order status",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "aff497bc-be4b-4705-80e3-25a9678fb367",
						"exec": [
							"var schema = JSON.parse(postman.getEnvironmentVariable('orderSchema'));",
							"var defaultContentType = postman.getEnvironmentVariable('defaultContentType');",
							"var defaultContentTypeRegExp = postman.getEnvironmentVariable('defaultContentTypeRegExp');",
							"var baseUrl = postman.getEnvironmentVariable('baseUrl');",
							"var nsUri = postman.getEnvironmentVariable('nsUri');",
							"var order = JSON.parse(responseBody);",
							"",
							"var selfLink = order['@id'];",
							"",
							"tests['status code is 200 OK'] = responseCode.code === 200;",
							"tests['Content-Type header is ' + defaultContentType] = postman.getResponseHeader('Content-Type').match(defaultContentTypeRegExp);",
							"// tests['response body is a order'] = tv4.validate(order, schema);",
							"tests['order status is Cancelled'] = order.orderStatus === 'Cancelled';",
							"tests['response body contains self link'] = selfLink.match(baseUrl + 'orders/.*');",
							"tests['response body contains no cancel link'] = _.isUndefined(order.cancel);",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "{{defaultAccept}}"
					}
				],
				"url": {
					"raw": "{{orderLink}}",
					"host": [
						"{{orderLink}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "View Orders",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "b6a3f31d-583f-4349-9b8e-5bffd92bf6ea",
						"exec": [
							"var schema = JSON.parse(postman.getEnvironmentVariable('ordersSchema'));",
							"var defaultContentType = postman.getEnvironmentVariable('defaultContentType');",
							"var defaultContentTypeRegExp = postman.getEnvironmentVariable('defaultContentTypeRegExp');",
							"var baseUrl = postman.getEnvironmentVariable('baseUrl');",
							"var nsUri = postman.getEnvironmentVariable('nsUri');",
							"var orders = JSON.parse(responseBody);",
							"",
							"var selfLink = orders['@id'];",
							"var orderList = orders.orders;",
							"",
							"tests['status code is 200 OK'] = responseCode.code === 200;",
							"tests['Content-Type header is ' + defaultContentType] = postman.getResponseHeader('Content-Type').match(defaultContentTypeRegExp);",
							"// tests['response body is a list of orders'] = tv4.validate(orders, schema);",
							"tests['response body contains at least 1 order'] = orderList.length >= 1;",
							"tests['response body contains self link'] = selfLink.match(baseUrl + 'orders');",
							"",
							"var allOrdersHaveSelfLink = true;",
							"var allOpenOrdersHaveCancelLink = true;",
							"",
							"orderList.forEach(function (order) {",
							"    var orderHasSelfLink = order['@id'].match(baseUrl + 'orders/.*');",
							"    allOrdersHaveSelfLink = allOrdersHaveSelfLink && orderHasSelfLink;",
							"    ",
							"    if (['PaymentDue', 'Processing'].includes(order.status)) {",
							"        var orderHasCancelLink = order.cancel.match(baseUrl + 'orders/.*');",
							"        allOpenOrdersHaveCancelLink = allOpenOrdersHaveCancelLink && orderHasCancelLink;",
							"    }",
							"    ",
							"});",
							"",
							"tests['all orders have self link'] = allOrdersHaveSelfLink;",
							"tests['all open orders have cancel link'] = allOpenOrdersHaveCancelLink;",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "{{defaultAccept}}"
					}
				],
				"url": {
					"raw": "{{ordersLink}}",
					"host": [
						"{{ordersLink}}"
					]
				}
			},
			"response": []
		}
	],
	"protocolProfileBehavior": {}
}
